---
import '../styles/article-list.css';

import { getCollection } from "astro:content";
import Card from "../components/Card.astro";
import Icon from "../components/Icon.astro";
import Layout from "../layouts/Layout.astro";
import { openGraph, name as siteName } from 'spectre:globals';

// Define article and topic types
interface ArticleData {
  title: string;
  date: Date;
  description: string;
  draft?: boolean;
  topics?: (string | { id: string; name?: string })[];
}

interface Article {
  id: string;
  slug: string;
  body: string;
  collection: string;
  data: ArticleData;
}

type TopicObject = { id: string; name?: string };
type Topic = string | TopicObject;

// Get articles with type assertion
const articles = await getCollection('articles') as unknown as Article[];
const filteredArticles = articles.filter(article => article.data.draft !== true);

// Extract topics from articles
const topics = filteredArticles.flatMap((article) => {
  const articleTopics = article.data.topics || [] as Topic[];
  return articleTopics.map(topic => typeof topic === 'object' ? topic.id : topic);
});

---
<Layout
  title={openGraph.blog.title || "Articles"}
  description={openGraph.blog.description || "Browse all articles"}
  pagefindIgnore={true}
>
  <div class="layout-grid-left" slot="left">
    <Card class="flex-col-card">
      <h2 class="no-mt">Filter by Topic</h2>
      <ul class="tags-list">
        {Array.from(new Set(topics)).map((topic: string) => (
          <li>
            <a
              class="blog-tag" 
              href={`/articles?topics=${encodeURIComponent(topic)}`}
              data-topic={topic}
            >
              {topic}
            </a>
          </li>
        ))}
        {topics.length === 0 && <li>No topics found.</li>}
      </ul>
    </Card>
  </div>
  <div class="layout-grid-right" slot="right">
    <Card>
      <div class="header-container">
        {/* Using a generic document icon, change if there's a better one for articles */}
        <Icon type="lucide" name="files" width={24} height={24} class='glow-icon' /> 
        <h2>Latest Articles</h2>
      </div>
      <div class="content-container">
        {filteredArticles.sort((a, b) => b.data.date.getTime() - a.data.date.getTime()).map((article) => (
          <a href={`/articles/${article.id}`} class="post-container" data-topics={(article.data.topics || [] as Topic[]).map(topic => typeof topic === 'object' ? topic.id : topic).join(",")}> 
            <div class="post-header">
              <h3>{article.data.title}</h3>
              <span class="post-date">{article.data.date.toLocaleDateString()}</span>
            </div>
            <span>{article.data.description}</span>
          </a>
        ))}
        {filteredArticles.length === 0 && <p>No articles found yet.</p>}
      </div>
    </Card>
  </div>
</Layout>
<script>
  // Script for client-side topic filtering
  const topicElements = document.querySelectorAll('.blog-tag');
  const url = new URL(window.location.href);
  const currentTopics = url.searchParams.get('topics')?.split(',').filter((topic) => topic.length > 0) || [];
  const articles = document.querySelectorAll('.post-container');

  // Set initial active state for topics and adjust hrefs
  topicElements.forEach((topicElement) => {
    if (topicElement instanceof HTMLAnchorElement) {
      const topicValue = topicElement.dataset.topic;
      let active = false;
      if (topicValue && currentTopics.includes(topicValue)) {
        topicElement.classList.add('active');
        active = true;
      }

      // Create new URLSearchParams for link construction
      const newParams = new URLSearchParams(url.search);
      if (active) {
        // Remove topic if active (toggle off)
        const updatedTopics = currentTopics.filter(t => t !== topicValue);
        if (updatedTopics.length > 0) {
          newParams.set('topics', updatedTopics.join(','));
        } else {
          newParams.delete('topics');
        }
      } else if (topicValue) { // Only add topic if topicValue is defined
        // Add topic if not active (toggle on)
        const updatedTopics = [...currentTopics, topicValue];
        newParams.set('topics', updatedTopics.join(','));
      }
      topicElement.href = `/articles?${newParams.toString()}`;
    }
  });

  // Filter articles based on current topics
  articles.forEach((articleElement) => {
    if (articleElement instanceof HTMLElement) { // Ensure it's an HTMLElement for dataset
      const articleTopicsString = articleElement.dataset.topics;
      const articleTopics = articleTopicsString ? articleTopicsString.split(',') : [];
      if (currentTopics.length > 0 && !currentTopics.every((topic) => articleTopics.includes(topic))) {
        articleElement.style.display = 'none';
      } else {
        articleElement.style.display = ''; // Ensure it's visible if not filtered
      }
    }
  });
</script>
