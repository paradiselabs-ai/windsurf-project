---
import '../../styles/article.css';

import ImageGlow from "../../components/ImageGlow.astro";
import Card from "../../components/Card.astro";
import Layout from "../../layouts/Layout.astro";

import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { render } from "astro:content";
import { getCollection } from "astro:content";
import { giscus } from 'spectre:globals';

interface Props {
  thought: CollectionEntry<'thoughts'>;
}

// @ts-ignore - This is needed because the spectre:globals module is resolved at runtime

const { thought } = Astro.props;

export const getStaticPaths = (async () => {
  const thoughts = await getCollection('thoughts'); 

  return thoughts.map((thought) => ({ params: { thought: thought.id }, props: { thought } }));
}) satisfies GetStaticPaths;

const { Content, headings } = await render(thought);
---

<Layout
  title={thought.data.title}
  description={thought.data.description}
  image={thought.data.image}
  article={{
    createdAt: thought.data.date, 
    updatedAt: thought.data.date, 
  }}
>
  <div class="left" slot="left">
    <Card class="toc-card">
      <h2 class="no-mt">Table of contents</h2>
      <ol>
        <li class="toc-li">
          <a href={`#_top`} class="active">{thought.data.title}</a> 
        </li>
        {headings.map((heading, i) => (
          <li class="toc-li" data-depth={heading.depth}>
            <a href={`#${heading.slug}`}>{heading.text}</a>
          </li>
        ))}
      </ol>
    </Card>
  </div>
  <article slot="right" data-pagefind-body>
    <Card>
      <div class="article-header" id="_top" data-pagefind-ignore>
        {/* Conditionally render ImageGlow only if image exists */}
        {thought.data.image && (
          <ImageGlow quality={100} class="article-image" src={thought.data.image} alt={thought.data.title} />
        )}
        <div class="header">
          <div>
            <h1 class="no-mt article-h1">{thought.data.title}</h1>
          </div>
          <div class="article-info">
            <span>{thought.data.date.toLocaleDateString()}</span>
          </div>
        </div>
      </div>
      <Content />
      <hr class="end-of-article" />
      <a href="/thoughts" class="block-link" data-pagefind-ignore>‚Üê Back to thoughts</a>
    </Card>
    {giscus && (
      <Card>
        <div class="comments" data-pagefind-ignore>
          <script
            is:inline
            src="https://giscus.app/client.js"
            data-repo={giscus.repository}
            data-repo-id={giscus.repositoryId}
            data-category={giscus.category}
            data-category-id={giscus.categoryId}
            data-mapping={giscus.mapping}
            data-strict={giscus.strict === true ? "1" : "0"}
            data-reactions-enabled={giscus.reactionsEnabled === true ? "1" : "0"}
            data-emit-metadata={giscus.emitMetadata === true ? "1" : "0"}
            data-input-position={giscus.commentsInput}
            data-theme={giscus.theme || "https://spectre.louisescher.dev/styles/giscus"}
            data-lang={giscus.lang}
            data-loading="lazy"
            crossorigin="anonymous"
            async
          />
        </div>
      </Card>
    )}
  </article>
</Layout>
<script src="../../scripts/toc.ts" />
<style is:global>
  .toc-card ol {
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: .5rem;
    margin-bottom: 0;
    list-style-type: none;
    position: relative;
  }

  .toc-card ol li a {
    color: #c7c7c7;
    font-size: .925rem;
    padding: .25rem .5rem;
    box-decoration-break: clone;
    -webkit-box-decoration-break: clone;
  }

  .toc-card ol li a:hover {
    color: white;
    text-decoration: none;
  }

  .toc-card ol li a.active {
    color: white;
    background: var(--primary);
  }

  .left {
    height: 100%;
    position: relative;
  }

  .toc-card {
    position: sticky;
    top: 2rem;
  }

  article {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .comments * {
    border-color: #353535 !important;
  }

  @media screen and (max-width: 640px) {
    article {
      gap: 1rem;
    }
  }
</style>
